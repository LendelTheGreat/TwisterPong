<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speedH</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>8</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speedV</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>8</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();


//Fill keys as empty
//create twister objects
var i;
for(i = 0; i &lt; 4; i += 1) {
    key[i] = 0;
    key_display[i] = instance_create(((room_width/2 - 128) + i*64), room_height/2 - 32, obj_key_display);
    key_colours[i] = instance_create(((room_width/2 - 128) + i*64), room_height/2 - 32, obj_key_colours);
    
    key_display[i].depth = 500;
    
    key_colours[i].depth = 1000;
    key_colours[i].image_index = irandom(3);
}

can_move = true;
hit_count = 0;
prev_hit_count = 0;


cool_down = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentPlayer == 1) {
    net_client_send(10, 2, NET_INT, self.x, self.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cool_down = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>net_client_update();

self.x = net_client_get(10,1);
self.y = net_client_get(10,2);

if (currentPlayer == 1) {
    if (self.x &lt; 0 || self.x &gt; room_width) {
        self.x = room_width/2;
    }
    if (self.y &lt; 0 || self.y &gt; room_height) {
        self.y = room_height/2;
    }
    
    
    net_client_send(10, 2, NET_INT, self.x + self.speedH, self.y + self.speedV);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Won't perform action unless there is a new hit
if cool_down {
    new_hit = hit_count &gt; prev_hit_count
} else {
    new_hit = false
}

if new_hit {
    
    
    //while (inArray) {
    new_key = irandom(25);
    //inArray = false;
    
    //var r;
    //for(r = 0; r &lt; 5; r += 1) {
       // if ((key[i] + 65) == new_key) {
        //    inArray = true;
       // }
   // }
   // }
    

    //New key added
    key[prev_hit_count % 4] = new_key + 65;
    //key object changed
    key_display[prev_hit_count % 4].image_index = new_key + 1;
    key_colours[prev_hit_count % 4].image_index = irandom(3);
    
    
    prev_hit_count += 1;
    
    //cool down, so no double collisions
    cool_down = false;
    alarm[0] = 1*room_speed;
}


//if all valid keys are pressed, player can move
var j;
for (j = 0; j &lt; 4; j += 1) {
    if key[j] != 0 {
        can_move = keyboard_check(key[j]);
        
        if !can_move {
            break;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player_horizontal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentPlayer == 1 &amp;&amp; other.visible) {
    if cool_down {
        hit_count += 1;
    }
    
    max_speed = 8;
    
    if (self.y &lt; room_height/2) {
        yDifference = other.x - self.x + 64;
        self.speedH = max_speed * 0.75 * yDifference/64 * (-1);
        self.speedV = max_speed * ((1 - abs(yDifference/64) * 0.75) + 0.25);
    }
    else {
        yDifference = other.x - self.x + 64;
        self.speedH = max_speed * 0.75 * yDifference/64  * (-1);
        self.speedV = (-1) * max_speed * ((1 - abs(yDifference/64) * 0.75) + 0.25);
    }
    
}

if (currentPlayer == 1 &amp;&amp; other.visible) {
    if (self.y &lt; room_height/2) {
        self.speedV = abs(self.speedV);
    }
    else {
        self.speedV = (-1) * abs(self.speedV);
    }
    
    hit_count += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player_keyboard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.visible {
    if cool_down {
        hit_count += 1;
    }
}


if (currentPlayer == 1 &amp;&amp; other.visible) {
    
    max_speed = 8;
    
    if (self.x &lt; room_width/2) {
        yDifference = other.y - self.y + 64;
        self.speedH = max_speed * ((1 - abs(yDifference/64) * 0.75) + 0.25);
        self.speedV = max_speed * 0.75 * yDifference/64 * (-1);
    }
    else {
        yDifference = other.y - self.y + 64;
        self.speedH = (-1) * max_speed * ((1 - abs(yDifference/64) * 0.75) + 0.25);
        self.speedV = max_speed * 0.75 * yDifference/64  * (-1);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
